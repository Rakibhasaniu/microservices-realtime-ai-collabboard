import RedisConfig from '../config/redis';

export const sessionUtils = {
  
  async setSession(userId: string, sessionData: any, expiresInSeconds: number = 86400): Promise<void> {
    try {
      const redis = RedisConfig.getInstance().getClient();
      const key = `session:${userId}`;
      
      await redis.setEx(key, expiresInSeconds, JSON.stringify({
        ...sessionData,
        createdAt: new Date(),
        expiresAt: new Date(Date.now() + expiresInSeconds * 1000)
      }));
      
      console.log('‚úÖ Session stored successfully');
      
    } catch (error) {
      console.error('‚ùå Error storing session:', error);
      throw error;
    }
  },

  async getSession(userId: string): Promise<any | null> {
    try {
      const redis = RedisConfig.getInstance().getClient();
      const key = `session:${userId}`;
      
      // console.log('üìñ Retrieving session for user:', userId);
      
      const session = await redis.get(key);
      
      if (!session) {
        console.log('‚ö†Ô∏è No session found for user:', userId);
        return null;
      }
      
      const parsedSession = JSON.parse(session);
      // console.log('‚úÖ Session retrieved successfully');
      return parsedSession;
      
    } catch (error) {
      console.error('‚ùå Error retrieving session:', error);
      return null;
    }
  },

  // üóëÔ∏è Delete user session (logout)
  async deleteSession(userId: string): Promise<void> {
    try {
      const redis = RedisConfig.getInstance().getClient();
      const key = `session:${userId}`;
      
      // console.log('üóëÔ∏è Deleting session for user:', userId);
      
      await redis.del(key);
      // console.log('‚úÖ Session deleted successfully');
      
    } catch (error) {
      console.error('‚ùå Error deleting session:', error);
      throw error;
    }
  },

  // ‚ùì Check if session exists
  async sessionExists(userId: string): Promise<boolean> {
    try {
      const redis = RedisConfig.getInstance().getClient();
      const key = `session:${userId}`;
      
      const exists = await redis.exists(key) === 1;
      // console.log('‚ùì Session exists for user', userId, ':', exists);
      return exists;
      
    } catch (error) {
      console.error('‚ùå Error checking session:', error);
      return false;
    }
  },

  // ‚è±Ô∏è Extend session expiry
  async extendSession(userId: string, additionalSeconds: number = 86400): Promise<void> {
    try {
      const redis = RedisConfig.getInstance().getClient();
      const key = `session:${userId}`;
      
      // console.log('‚è±Ô∏è Extending session for user:', userId);
      
      await redis.expire(key, additionalSeconds);
      // console.log('‚úÖ Session extended successfully');
      
    } catch (error) {
      console.error('‚ùå Error extending session:', error);
      throw error;
    }
  }
};